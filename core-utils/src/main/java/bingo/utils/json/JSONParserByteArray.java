package bingo.utils.json;

/*
 *    Copyright 2011 JSON-SMART authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import static bingo.utils.json.JSONParserException.ERROR_UNEXPECTED_EOF;

/**
 * Parser for JSON text. Please note that JSONParser is NOT thread-safe.
 * 
 * @author Uriel Chemouni <uchemouni@gmail.com>
 */
class JSONParserByteArray extends JSONParserMemory {
	private byte[] in;

	public JSONParserByteArray(int permissiveMode) {
		super(permissiveMode);
	}

	/**
	 * use to return Primitive Type, or String, Or JsonObject or JsonArray
	 * generated by a ContainerFactory
	 */
	public Object parse(byte[] in) throws JSONParserException {
		this.in = in;
		this.len = in.length;
		return parse();
	}

	protected void extractString(int beginIndex, int endIndex) {
		xs = new String(in, beginIndex, endIndex - beginIndex);
	}

	protected int indexOf(char c, int pos) {
		for (int i = pos; pos < len; i++)
			if (in[i] == (byte) c)
				return i;
		return -1;
	}

	protected void read() {
		if (++pos >= len)
			this.c = EOI;
		else
			this.c = (char) in[pos];
	}

	/**
	 * Same as read() in memory parssing
	 */
	protected void readS() {
		if (++pos >= len)
			this.c = EOI;
		else
			this.c = (char) in[pos];
	}

	protected void readNoEnd() throws JSONParserException {
		if (++pos >= len) {
			this.c = EOI;
			throw new JSONParserException(pos - 1, ERROR_UNEXPECTED_EOF, "EOF");
		} else
			this.c = (char) in[pos];
	}

}
